---
- hosts: "masters, workers"
  become: yes
  become_method: sudo
  become_user: root
  gather_facts: yes
  connection: ssh
  vars:
    - version_kube: 1.26.1-00

  tasks:
   
   - name: Make the Swap inactive
     command: swapoff -a

   - name: Remove Swap entry from /etc/fstab.
     lineinfile:
       dest: /etc/fstab
       regexp: swap
       state: absent

   - name: Create a empty file for containerd module.
     copy:
       content: ""
       dest: /etc/modules-load.d/containerd.conf
       force: no

   - name: Configure module for containerd.
     blockinfile:
       path: /etc/modules-load.d/containerd.conf 
       block: |
            overlay
            br_netfilter

   - name: Create a empty file for kubernetes sysctl params.
     copy:
       content: ""
       dest: /etc/sysctl.d/99-kubernetes-cri.conf
       force: no

   - name: Configure sysctl params for Kubernetes.
     lineinfile:
       path: /etc/sysctl.d/99-kubernetes-cri.conf 
       line: "{{ item }}"
     with_items:
       - 'net.bridge.bridge-nf-call-iptables  = 1'
       - 'net.ipv4.ip_forward                 = 1'
       - 'net.bridge.bridge-nf-call-ip6tables = 1'

   - name: Apply sysctl params without reboot.
     command: sysctl --system

   - name: Installing Prerequisites for Kubernetes
     apt: 
       name:
         - apt-transport-https
         - ca-certificates
         - curl
         - gnupg-agent
         - vim
         - software-properties-common
       state: present

   - name: Add Dockers official GPG key
     apt_key:
       url: https://download.docker.com/linux/ubuntu/gpg
       state: present
       keyring: /etc/apt/trusted.gpg.d/docker.gpg

   - name: Add Docker Repository
     apt_repository:
       repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu jammy stable"
       state: present
       filename: docker
       mode: 0600
  # 
  #  - name: Install Docker Engine.
  #    apt: 
  #      name: docker-ce
  #      state: present
  #      update_cache: true

  #  - name: Enable service docker, and enable persistently
  #    service: 
  #      name: docker
  #      enabled: yes

   - name: Install containerd.
     apt: 
       name:
         - containerd.io
       state: present

   - name: Configure containerd.
     file:
       path: /etc/containerd
       state: directory

   - name: Configure containerd.
     shell: /usr/bin/containerd config default > /etc/containerd/config.toml
     
   - name: Enable containerd service, and start it.
     systemd: 
       name: containerd
       state: restarted
       enabled: yes
       daemon-reload: yes

   - name: Add Google official GPG key
     apt_key:
       url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
       state: present
       keyring: /etc/apt/trusted.gpg.d/kuber.gpg

   - name: Add Kubernetes Repository
     apt_repository:
       repo: "deb http://apt.kubernetes.io/ kubernetes-xenial main" 
       state: present
       filename: kubernetes
       mode: 0600

   - name: Unhold kubeadm service
     ansible.builtin.dpkg_selections:
      name: kubeadm
      selection: install

   - name: Unhold kubectl service
     ansible.builtin.dpkg_selections:
      name: kubectl
      selection: install

   - name: Unhold kubelet service
     ansible.builtin.dpkg_selections:
      name: kubelet
      selection: install

   - name: Installing Kubernetes Cluster Packages.
     apt: 
       name:
         - kubeadm={{ version_kube }}
         - kubectl={{ version_kube }}
         - kubelet={{ version_kube }}
       state: present

   - name: Enable service kubelet, and enable persistently
     service: 
       name: kubelet
       enabled: yes

   - name: Hold kubeadm service
     ansible.builtin.dpkg_selections:
      name: kubeadm
      selection: hold

   - name: Hold kubectl service
     ansible.builtin.dpkg_selections:
      name: kubectl
      selection: hold

   - name: Hold kubelet service
     ansible.builtin.dpkg_selections:
      name: kubelet
      selection: hold

   - name: Reboot all the kubernetes nodes.
     reboot:
       post_reboot_delay: 20
       reboot_timeout: 200
       connect_timeout: 100
       test_command: uptime